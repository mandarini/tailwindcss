name: CI

on:
  push:
    branches: [next]
  pull_request:

permissions:
  actions: read
  contents: read

jobs:
  dte:
    name: DTE Host
    strategy:
      fail-fast: false
      matrix:
        node-version: [20]

    runs-on: 'ubuntu-latest'
    timeout-minutes: 30

    env:
      NX_BRANCH: ${{ github.event.pull_request.head.ref || github.ref }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4

      - name: 'Start CI Runs'
        run: |
          NX_CI_EXECUTION_ENV=linux   pnpm dlx nx-cloud start-ci-run --distribute-on="3 tailwind-linux-rust" --stop-agents-on-failure=false --stop-agents-after="integration-test"
          NX_CI_EXECUTION_ENV=windows pnpm dlx nx-cloud start-ci-run --distribute-on="manual"                --stop-agents-on-failure=false --stop-agents-after="integration-test"
          NX_CI_EXECUTION_ENV=macos   pnpm dlx nx-cloud start-ci-run --distribute-on="manual"                --stop-agents-on-failure=false --stop-agents-after="integration-test"

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: 'next'

      # Run this first, serially to ensure graph is created before we kick off affected in parallel
      - name: Format Check
        run: pnpm exec nx-cloud record -- nx format:check
        env:
          NX_CLOUD_DISTRIBUTED_EXECUTION: false
          NX_CI_EXECUTION_ENV: linux

      - name: Run Affected Tasks
        run: |
          cat << EOM | parallel {} --exclude="*playground*" --base=$NX_BASE --head=$NX_HEAD
          NX_CI_EXECUTION_ENV=linux   pnpm exec nx affected -t lint,build,test,test:ui,integration-test
          NX_CI_EXECUTION_ENV=windows pnpm exec nx affected -t build,test,test:ui,integration-test
          NX_CI_EXECUTION_ENV=macos   pnpm exec nx affected -t build,test,test:ui,integration-test
          EOM

  dte-agent:
    name: DTE Agent ${{ matrix.agent_number }} (${{ matrix.nx_ci_execution_env }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    env:
      NX_CI_EXECUTION_ENV: ${{ matrix.nx_ci_execution_env}}
      NX_BRANCH: ${{ github.event.pull_request.head.ref || github.ref }}

    strategy:
      fail-fast: false
      matrix:
        node-version: [20]
        agent_number: [1, 2, 3]
        os: [windows-latest, macos-14]
        include:
          - os: windows-latest
            nx_ci_execution_env: windows
          - os: macos-14
            nx_ci_execution_env: macos

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      # Cache cargo if Rust
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - if: matrix.nx_ci_execution_env == 'windows'
        name: 'Setup windows env variables'
        run: |
          # Fix issue with cross-compiled binaries failing to copy into non existent home dir (C:\Users\Workflows)
          Add-Content -Path $env:GITHUB_ENV -Value "BUN_INSTALL_CACHE_DIR=$env:GITHUB_WORKSPACE\.bun\install\cache"

      - name: Install Rust (Stable)
        run: rustup default stable

      - name: Install dependencies
        run: pnpm install

      - name: Install Playwrite
        run: pnpm exec playwright install --with-deps

      - name: Start Nx Agent ${{ matrix.agent_number }}
        run: pnpm exec nx-cloud start-agent
        env:
          NX_AGENT_NAME: ${{ matrix.agent_number }}
